Assignment 1: Banking System Design
ðŸ’¡ Scenario:
Design a system where different banks provide different interest rates on fixed deposits.
ðŸ”§ Requirements:
â€¢	Create an abstract class Banks with:
o	An abstract method getInterestRate()
o	A method displayBankInfo() (common to all banks)
â€¢	Create subclasses:
o	SBI, HDFC, and ICICI that override getInterestRate() with their specific rates.
â€¢	Create an interface OnlineBankingFeatures with:
o	void transferMoney()
o	void checkBalance()
â€¢	Implement the interface in the respective bank classes with dummy implementation
ðŸ“¥ Sample Input:
Banks bank = new HDFC();
bank.getInterestRate(); // 6.5%
bank.displayBankInfo();

OnlineBankingFeatures ob = new HDFC();
ob.transferMoney();

ðŸ“¤ Expected Output:
Banks Name: HDFC
Interest Rate: 6.5%
Transferring Money Online...

ðŸ§ª Assignment 2: Vehicle Rental System
ðŸ’¡ Scenario:
A vehicle rental company rents various types of vehicles.
ðŸ”§ Requirements:
â€¢	Create an abstract class Vehicle with:
o	Properties: brand, fuelType
o	Abstract method calculateRentalPrice(int days)
o	Method displayInfo()
â€¢	Create subclasses:
o	Car, Bike, Truck with different rental price logic
â€¢	Create interface Maintainable with method void serviceSchedule()
â€¢	Implement the interface in each subclass with custom logic
ðŸ“¥ Sample Input:
Vehicle v = new Car("Toyota", "Petrol");
v.displayInfo();
System.out.println("Rent: " + v.calculateRentalPrice(5));

Maintainable m = (Maintainable) v;
m.serviceSchedule();

ðŸ“¤ Expected Output:
Vehicle: Toyota | Fuel: Petrol
Rent: 2500
Car service every 5000 km or 6 months

ðŸ§ª Assignment 3: E-Commerce System Interfaces
ðŸ’¡ Scenario:
You're designing an online shopping platform.
ðŸ”§ Requirements:
â€¢	Create interface Product with methods:
o	String getName()
o	double getPrice()
â€¢	Create interface Discountable with method:
o	double applyDiscount(double percentage)
â€¢	Create classes Electronics, Clothing, Grocery that implement both interfaces.
â€¢	Simulate applying discounts and displaying product details.
ðŸ“¥ Sample Input:
Product p = new Electronics("Laptop", 60000);
Discountable d = (Discountable) p;
System.out.println(p.getName() + ": " + d.applyDiscount(10));

ðŸ“¤ Expected Output:
Laptop: 54000.0
